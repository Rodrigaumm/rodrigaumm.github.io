{"version":3,"sources":["assets/logo.svg","assets/github-background.svg","pages/Dashboard/style.ts","services/api.ts","pages/Dashboard/Dashboard.tsx","pages/Repository/styles.ts","pages/Repository/Repository.tsx","routes/index.tsx","styles/Global.ts","App.tsx","index.tsx"],"names":["module","exports","Title","styled","h1","Form","form","props","hasError","css","shade","Error","span","Repositories","div","api","axios","create","baseURL","Dashboard","useState","repoInputValue","setRepoInputValue","inputError","setInputError","storagedRepositories","localStorage","getItem","JSON","parse","repositories","setRepositories","event","a","preventDefault","reposNames","map","repository","full_name","toUpperCase","includes","get","data","useEffect","setItem","stringify","src","logoImg","alt","onSubmit","type","placeholder","value","onChange","e","target","to","key","owner","avatar_url","login","description","size","Header","header","RepositoryInfo","section","OpenIssues","Repository","repo","useParams","setRepository","issues","setIssues","then","response","stargazers_count","forks","open_issues","issue","id","rel","href","html_url","title","user","Routes","path","exact","component","GlobalStyle","createGlobalStyle","GithubBackground","App","Global","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,+C,wOCO9BC,EAAQC,IAAOC,GAAV,qHAOLC,EAAOF,IAAOG,KAAV,ysBAeP,SAACC,GAAD,OACEA,EAAMC,UACNC,YADA,kFAqBcC,YAAM,GAAK,YAKxBC,EAAQR,IAAOS,KAAV,4FAMLC,EAAeV,IAAOW,IAAV,4hC,QCxDVC,E,OAJHC,EAAMC,OAAO,CACrBC,QAAS,2BCoHEC,EAtGa,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACvBC,EADuB,KACPC,EADO,OAEMF,mBAAS,IAFf,mBAEvBG,EAFuB,KAEXC,EAFW,OAGUJ,oBAAuB,WAC3D,IAAMK,EAAuBC,aAAaC,QACtC,iCAGJ,OAAIF,EACOG,KAAKC,MAAMJ,GAEX,MAXe,mBAGvBK,EAHuB,KAGTC,EAHS,iDAsB9B,WAAmCC,GAAnC,iBAAAC,EAAA,yDACID,EAAME,iBAENV,EAAc,IAETH,EALT,uBAMQG,EACI,2FAPZ,6BAYUW,EAAaL,EAAaM,KAAI,SAACC,GAAD,OAChCA,EAAWC,UAAUC,kBAGGJ,EAAWK,SACnCnB,EAAekB,eAjBvB,wBAqBQjB,EAAkB,IArB1B,sDA0BiCP,EAAI0B,IAAJ,iBACXpB,IA3BtB,QA0BcgB,EA1Bd,OA6BQN,EAAgB,GAAD,mBAAKD,GAAL,CAAmBO,EAAWK,QA7BrD,mDA+BQlB,EACI,6GAhCZ,yBAmCQF,EAAkB,IAnC1B,+EAtB8B,sBA6D9B,OA9CAqB,qBAAU,WACNjB,aAAakB,QACT,gCACAhB,KAAKiB,UAAUf,MAEpB,CAACA,IA0CA,oCACI,yBAAKgB,IAAKC,IAASC,IAAI,yBACvB,kBAAC9C,EAAD,mDAEA,kBAACG,EAAD,CAAMG,WAAYe,EAAY0B,SAlER,6CAmElB,2BACIC,KAAK,OACLC,YAAY,iBACZC,MAAO/B,EACPgC,SAAU,SAACC,GACPhC,EAAkBgC,EAAEC,OAAOH,UAGnC,4BAAQF,KAAK,UAAb,cAGH3B,GAAc,kBAACZ,EAAD,KAAQY,GAEvB,kBAACV,EAAD,KACKiB,EAAaM,KAAI,SAACC,GAAD,OACd,kBAAC,IAAD,CACImB,GAAE,wBAAmBnB,EAAWC,WAChCmB,IAAKpB,EAAWC,WAEhB,yBACIQ,IAAKT,EAAWqB,MAAMC,WACtBX,IAAKX,EAAWqB,MAAME,QAE1B,6BACI,gCAASvB,EAAWC,WACpB,2BAAID,EAAWwB,cAEnB,kBAAC,IAAD,CAAgBC,KAAM,YC5GjCC,EAAS5D,IAAO6D,OAAV,oYAYEtD,YAAM,GAAK,YAUnBuD,EAAiB9D,IAAO+D,QAAV,4pCA6DdC,EAAahE,IAAOW,IAAV,g7BCqBRsD,EA1Ec,WAAO,IACxBC,EAASC,cAATD,KADuB,EAEKjD,mBAA4B,MAFjC,mBAExBiB,EAFwB,KAEZkC,EAFY,OAGHnD,mBAAkB,IAHf,mBAGxBoD,EAHwB,KAGhBC,EAHgB,KAc/B,OATA9B,qBAAU,WACN5B,EAAI0B,IAAJ,gBAAiB4B,IAAQK,MAAK,SAACC,GAAD,OAC1BJ,EAAcI,EAASjC,SAE3B3B,EAAI0B,IAAJ,gBAAiB4B,EAAjB,YAAgCK,MAAK,SAACC,GAClCF,EAAUE,EAASjC,WAExB,CAAC2B,IAGA,oCACI,kBAACN,EAAD,KACI,yBAAKjB,IAAKC,IAASC,IAAI,yBACvB,kBAAC,IAAD,CAAMQ,GAAG,KACL,kBAAC,IAAD,CAAeM,KAAM,KACrB,0CAIPzB,GACG,kBAAC4B,EAAD,KACI,gCACI,yBACInB,IAAKT,EAAWqB,MAAMC,WACtBX,IAAKX,EAAWqB,MAAME,QAE1B,6BACI,gCAASvB,EAAWC,WACpB,8BAAOD,EAAWwB,eAI1B,4BACI,4BACI,gCAASxB,EAAWuC,kBACpB,wCAEJ,4BACI,gCAASvC,EAAWwC,OACpB,wCAEJ,4BACI,gCAASxC,EAAWyC,aACpB,mDAMhB,kBAACX,EAAD,KACKK,EAAOpC,KAAI,SAAC2C,GAAD,OACR,uBACItB,IAAKsB,EAAMC,GACXzB,OAAO,SACP0B,IAAI,sBACJC,KAAMH,EAAMI,UAEZ,6BACI,gCAASJ,EAAMK,OACf,2BAAIL,EAAMM,KAAKzB,QAEnB,kBAAC,IAAD,CAAgBE,KAAM,YCtF/BwB,EAPU,kBACrB,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWtE,IACjC,kBAAC,IAAD,CAAOoE,KAAK,uBAAuBE,UAAWrB,M,iBCmCvCsB,EAxCKC,YAAH,+mBAmBiBC,KCRnBC,EATO,kBAClB,oCACI,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEJ,kBAACC,EAAD,QCPRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.8a3d7f66.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.18e060ec.svg\";","module.exports = __webpack_public_path__ + \"static/media/github-background.88c2d35e.svg\";","import styled, { css } from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\ninterface CustomProps {\r\n    hasError: Boolean;\r\n}\r\n\r\nexport const Title = styled.h1`\r\n    font-size: 48px;\r\n    color: #3a3a3a;\r\n    margin-top: 80px;\r\n    max-width: 550px;\r\n`;\r\n\r\nexport const Form = styled.form<CustomProps>`\r\n    margin-top: 40px;\r\n    max-width: 700px;\r\n    display: flex;\r\n\r\n    input {\r\n        flex: 1;\r\n        height: 70px;\r\n        border: 0;\r\n        padding: 0 24px;\r\n        color: #3a3a3a;\r\n        border-radius: 5px 0 0 5px;\r\n        border: 2px solid #fff;\r\n        border-right: 0;\r\n\r\n        ${(props) =>\r\n            props.hasError &&\r\n            css`\r\n                border-color: #c53030;\r\n            `}\r\n\r\n        &::placeholder {\r\n            color: #a8a8b3;\r\n        }\r\n    }\r\n\r\n    button {\r\n        width: 210px;\r\n        height: 70px;\r\n        background: #04d361;\r\n        border: 0;\r\n        color: #fff;\r\n        font-weight: bold;\r\n        border-radius: 0 5px 5px 0;\r\n        transition: background 0.2s;\r\n\r\n        &:hover {\r\n            background: ${shade(0.2, '#04d361')};\r\n        }\r\n    }\r\n`;\r\n\r\nexport const Error = styled.span`\r\n    color: #c53030;\r\n    display: block;\r\n    margin-top: 8px;\r\n`;\r\n\r\nexport const Repositories = styled.div`\r\n    max-width: 700px;\r\n    margin-top: 80px;\r\n\r\n    a {\r\n        text-decoration: none;\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        padding: 24px;\r\n        background: #fff;\r\n        transition: transform 0.2s;\r\n\r\n        &:hover {\r\n            transform: translateX(10px);\r\n        }\r\n\r\n        & + a {\r\n            margin-top: 16px;\r\n        }\r\n\r\n        img {\r\n            width: 80px;\r\n            height: 80px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        div {\r\n            margin: 16px;\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: space-between;\r\n\r\n            strong {\r\n                font-size: 20px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            p {\r\n                font-size: 18px;\r\n                margin-top: 4px;\r\n                color: #a8a8b3;\r\n            }\r\n        }\r\n        svg {\r\n            margin-left: auto;\r\n            color: #cbcbd6;\r\n        }\r\n    }\r\n`;\r\n","import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n    baseURL: 'https://api.github.com',\r\n});\r\n\r\nexport default api;\r\n","import React, { useState, FormEvent, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FiChevronRight } from 'react-icons/fi';\r\n\r\nimport logoImg from '../../assets/logo.svg';\r\nimport { Title, Form, Repositories, Error } from './style';\r\nimport api from '../../services/api';\r\n\r\ninterface Repository {\r\n    full_name: string;\r\n    owner: {\r\n        login: string;\r\n        avatar_url: string;\r\n    };\r\n    description: string | null;\r\n}\r\n\r\nconst Dashboard: React.FC = () => {\r\n    const [repoInputValue, setRepoInputValue] = useState('');\r\n    const [inputError, setInputError] = useState('');\r\n    const [repositories, setRepositories] = useState<Repository[]>(() => {\r\n        const storagedRepositories = localStorage.getItem(\r\n            '@GitHub-Explorer:repositories',\r\n        );\r\n\r\n        if (storagedRepositories) {\r\n            return JSON.parse(storagedRepositories);\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem(\r\n            '@GitHub-Explorer:repositories',\r\n            JSON.stringify(repositories),\r\n        );\r\n    }, [repositories]);\r\n\r\n    async function handleAddRepository(event: FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n\r\n        setInputError('');\r\n\r\n        if (!repoInputValue) {\r\n            setInputError(\r\n                'Digite uma combinação do usuário do autor do repositório separados por \"/\".',\r\n            );\r\n            return;\r\n        }\r\n\r\n        const reposNames = repositories.map((repository) =>\r\n            repository.full_name.toUpperCase(),\r\n        );\r\n\r\n        const repoAlreadyIncluded = reposNames.includes(\r\n            repoInputValue.toUpperCase(),\r\n        );\r\n\r\n        if (repoAlreadyIncluded) {\r\n            setRepoInputValue('');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const repository = await api.get<Repository>(\r\n                `/repos/${repoInputValue}`,\r\n            );\r\n            setRepositories([...repositories, repository.data]);\r\n        } catch (err) {\r\n            setInputError(\r\n                'Combinação inexistente de autor e repositório. Digite um valor válido no formato \"autor/repo\"',\r\n            );\r\n        } finally {\r\n            setRepoInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <img src={logoImg} alt=\"Github Explorer logo\" />\r\n            <Title>Explore e salve repositórios do GitHub.</Title>\r\n\r\n            <Form hasError={!!inputError} onSubmit={handleAddRepository}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"facebook/react\"\r\n                    value={repoInputValue}\r\n                    onChange={(e) => {\r\n                        setRepoInputValue(e.target.value);\r\n                    }}\r\n                />\r\n                <button type=\"submit\">Pesquisar</button>\r\n            </Form>\r\n\r\n            {inputError && <Error>{inputError}</Error>}\r\n\r\n            <Repositories>\r\n                {repositories.map((repository) => (\r\n                    <Link\r\n                        to={`/repositories/${repository.full_name}`}\r\n                        key={repository.full_name}\r\n                    >\r\n                        <img\r\n                            src={repository.owner.avatar_url}\r\n                            alt={repository.owner.login}\r\n                        />\r\n                        <div>\r\n                            <strong>{repository.full_name}</strong>\r\n                            <p>{repository.description}</p>\r\n                        </div>\r\n                        <FiChevronRight size={25} />\r\n                    </Link>\r\n                ))}\r\n            </Repositories>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Dashboard;\r\n","import styled from 'styled-components';\r\nimport { shade } from 'polished';\r\n\r\nexport const Header = styled.header`\r\n    display: flex;\r\n    align-content: center;\r\n    justify-content: space-between;\r\n\r\n    a {\r\n        display: flex;\r\n        align-items: center;\r\n        color: #a8a8b3;\r\n        transition: color 0.2s;\r\n\r\n        &:hover {\r\n            color: ${shade(0.4, '#a8a8b3')};\r\n        }\r\n\r\n        span {\r\n            display: block;\r\n            margin-left: 4px;\r\n        }\r\n    }\r\n`;\r\n\r\nexport const RepositoryInfo = styled.section`\r\n    margin-top: 80px;\r\n\r\n    header {\r\n        display: flex;\r\n        align-items: center;\r\n        img {\r\n            width: 120px;\r\n            height: 120px;\r\n            border-radius: 50%;\r\n        }\r\n\r\n        div {\r\n            margin-left: 24px;\r\n\r\n            strong {\r\n                font-size: 36px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            span {\r\n                font-size: 18px;\r\n                display: block;\r\n                margin-top: 4px;\r\n                color: #737380;\r\n            }\r\n        }\r\n\r\n        button {\r\n            margin-left: auto;\r\n            outline: 0;\r\n            background: transparent;\r\n            border: none;\r\n\r\n            position: relative;\r\n        }\r\n    }\r\n\r\n    ul {\r\n        display: flex;\r\n        margin-top: 40px;\r\n\r\n        li {\r\n            & + li {\r\n                margin-left: 80px;\r\n            }\r\n\r\n            strong {\r\n                font-size: 36px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            span {\r\n                font-size: 18px;\r\n                display: block;\r\n                color: #6c6c80;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport const OpenIssues = styled.div`\r\n    margin-top: 80px;\r\n\r\n    a {\r\n        text-decoration: none;\r\n        display: flex;\r\n        width: 100%;\r\n        align-items: center;\r\n        padding: 24px;\r\n        border-radius: 5px;\r\n        background: #fff;\r\n        transition: transform 0.2s;\r\n\r\n        &:hover {\r\n            transform: translateX(10px);\r\n        }\r\n\r\n        & + a {\r\n            margin-top: 16px;\r\n        }\r\n\r\n        div {\r\n            margin: 16px;\r\n            flex: 1;\r\n            display: flex;\r\n            flex-direction: column;\r\n            justify-content: space-between;\r\n\r\n            strong {\r\n                font-size: 20px;\r\n                color: #3d3d4d;\r\n            }\r\n\r\n            p {\r\n                font-size: 18px;\r\n                margin-top: 4px;\r\n                color: #a8a8b3;\r\n            }\r\n        }\r\n        svg {\r\n            margin-left: auto;\r\n            color: #cbcbd6;\r\n        }\r\n    }\r\n`;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { FiChevronLeft, FiChevronRight } from 'react-icons/fi';\r\n\r\nimport logoImg from '../../assets/logo.svg';\r\nimport { Header, RepositoryInfo, OpenIssues } from './styles';\r\nimport api from '../../services/api';\r\n\r\ninterface RouteParams {\r\n    repo: string;\r\n}\r\n\r\ninterface Repository {\r\n    full_name: string;\r\n    owner: {\r\n        avatar_url: string;\r\n        login: string;\r\n    };\r\n    description: string | null;\r\n    forks: number;\r\n    open_issues: number;\r\n    stargazers_count: number;\r\n}\r\n\r\ninterface Issue {\r\n    id: number;\r\n    title: string;\r\n    user: {\r\n        login: string;\r\n    };\r\n    html_url: string;\r\n}\r\n\r\nconst Repository: React.FC = () => {\r\n    const { repo } = useParams<RouteParams>();\r\n    const [repository, setRepository] = useState<Repository | null>(null);\r\n    const [issues, setIssues] = useState<Issue[]>([]);\r\n\r\n    useEffect(() => {\r\n        api.get(`repos/${repo}`).then((response) =>\r\n            setRepository(response.data),\r\n        );\r\n        api.get(`repos/${repo}/issues`).then((response) => {\r\n            setIssues(response.data);\r\n        });\r\n    }, [repo]);\r\n\r\n    return (\r\n        <>\r\n            <Header>\r\n                <img src={logoImg} alt=\"GitHub Explorer logo\" />\r\n                <Link to=\"/\">\r\n                    <FiChevronLeft size={16} />\r\n                    <span>Voltar</span>\r\n                </Link>\r\n            </Header>\r\n\r\n            {repository && (\r\n                <RepositoryInfo>\r\n                    <header>\r\n                        <img\r\n                            src={repository.owner.avatar_url}\r\n                            alt={repository.owner.login}\r\n                        />\r\n                        <div>\r\n                            <strong>{repository.full_name}</strong>\r\n                            <span>{repository.description}</span>\r\n                        </div>\r\n                    </header>\r\n\r\n                    <ul>\r\n                        <li>\r\n                            <strong>{repository.stargazers_count}</strong>\r\n                            <span>Stars</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.forks}</strong>\r\n                            <span>Forks</span>\r\n                        </li>\r\n                        <li>\r\n                            <strong>{repository.open_issues}</strong>\r\n                            <span>Issues abertas</span>\r\n                        </li>\r\n                    </ul>\r\n                </RepositoryInfo>\r\n            )}\r\n\r\n            <OpenIssues>\r\n                {issues.map((issue) => (\r\n                    <a\r\n                        key={issue.id}\r\n                        target=\"_blank\"\r\n                        rel=\"noopener noreferrer\"\r\n                        href={issue.html_url}\r\n                    >\r\n                        <div>\r\n                            <strong>{issue.title}</strong>\r\n                            <p>{issue.user.login}</p>\r\n                        </div>\r\n                        <FiChevronRight size={25} />\r\n                    </a>\r\n                ))}\r\n            </OpenIssues>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Repository;\r\n","import React from 'react';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport Dashboard from '../pages/Dashboard/Dashboard';\r\nimport Repository from '../pages/Repository/Repository';\r\n\r\nconst Routes: React.FC = () => (\r\n    <Switch>\r\n        <Route path=\"/\" exact component={Dashboard} />\r\n        <Route path=\"/repositories/:repo+\" component={Repository} />\r\n    </Switch>\r\n);\r\n\r\nexport default Routes;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nimport GithubBackground from '../assets/github-background.svg';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n    *{\r\n        margin:0;\r\n        padding:0;\r\n        outline:0;\r\n        box-sizing:border-box;\r\n    }\r\n\r\n    li{\r\n        list-style:none;\r\n    }\r\n\r\n    a{\r\n        text-decoration:none;\r\n        color:inherit;\r\n    }\r\n\r\n    body{\r\n        background: #F0F0F5 url(${GithubBackground}) no-repeat 70% top;\r\n        -webkit-font-smoothing:antialiased;\r\n    }\r\n\r\n    body, input, button{\r\n        font-size:16px ;\r\n        font-family:Roboto, sans-serif;\r\n    }\r\n\r\n    button{\r\n        cursor:pointer;\r\n    }\r\n\r\n    #root{\r\n        max-width:960px;\r\n        margin:0 auto;\r\n        padding:40px 20px;\r\n    }\r\n\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport Routes from './routes';\r\nimport GlobalStyle from './styles/Global';\r\n\r\nconst App: React.FC = () => (\r\n    <>\r\n        <BrowserRouter>\r\n            <Routes />\r\n        </BrowserRouter>\r\n        <GlobalStyle />\r\n    </>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}